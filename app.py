from datetime import datetime
from flask import request, jsonify
from flask_api import FlaskAPI, exceptions

app = FlaskAPI(__name__)

app.config["DEBUG"] == True

diary_entries = [
    {
        'id':0,
        'name':'My First Diary Entry',
        'description':"A very nice description of my first Diary",
        'labels' : ['cool', 'awesome'],
        'year' : str(datetime.now().year)
    },
    {
        'id':1,
        'name':'My Second Diary Entry',
        'description':"A very nice description of my second Diary",
        'labels' : ['cool', 'awesome', 'surprise'],
        'year' : str(datetime.now().year)
    },
    {
        'id':2,
        'name':'My Third Diary Entry',
        'description':"A very nice description of my third Diary",
        'labels' : ['cool', 'awesome', 'so cool'],
        'year' : str(datetime.now().year)
    },
    {
        'id':3,
        'name':'My First Fourth Entry',
        'description':"A very nice description of my fourth Diary",
        'labels' : ['cool', 'awesome'],
        'year' : str(datetime.now().year)
    },
    {
        'id':4,
        'name':'My First Fifth Entry',
        'description':"A very nice description of my fifth Diary",
        'labels' : ['cool', 'awesome'],
        'year' : str(datetime.now().year)
    }
]

"""This throws a 404 message for invalid api endpoints"""
@app.errorhandler(404)
def not_found(error=None):
    """The error handler"""
    response = {
        'status' : 404,
        'message' : 'Request Not Found:' + request.url,
    }
    res = jsonify(response)
    res.status_code = 404
    return res

"""This renders the home page.The app's entry point
This can be replaced by templated pages. Otherwise the pages can autogenerated
and written to"""
@app.route('/', methods=['GET'])
def home():
    """Home page handler"""
    return ''' <h1>My Diary listss API</h1>
    <p>Try the various endpoints for results</p>'''

"""Obtain a list of all known diary entries as given above no parameters required"""
@app.route('/api/v1/diaries/all', methods=['GET'])
def get_all():
    """List entry root path"""
    return jsonify(diary_entries)

"""This returns the diary entry for a given ID"""
@app.route('/api/v1/diaries/id', methods=['GET'])
def get_by_id():
    """Get ID from params"""
    if 'id' in request.args:
        id = int(request.args['id'])
    else:
        return 'Error: Diary ID can not be empty'
    res = []
    for diary in diary_entries:
        if diary['id'] == id:
            res.append(diary)
    return jsonify(res)

"""Allows editing of diary properties such as name,labels or year or desc by id.Accepts a JSON object."""
@app.route('/api/v1/diaries/<int:id>/edit', methods=['PUT'])
def edit_diary(id):
    """Edit diary details function"""
    diary = [diary for diary in diary_entries if diary['id'] == id]
    if len(diary) == 0:
        raise exceptions.NotFound
    if not request.json:
        raise exceptions.UnsupportedMediaType
    if 'name' in request.json and type(request.json['name']) != unicode:
        raise exceptions.UnsupportedMediaType
    if 'description' in request.json and type(request.json['description']) != unicode:
        raise exceptions.UnsupportedMediaType
    if 'year' in request.json and type(request.json['year']) != unicode:
        raise exceptions.UnsupportedMediaType
    diary[0]['name'] = request.json.get('name', diary[0]['name'])
    diary[0]['description'] = request.json.get('description', diary[0]['description'])
    diary[0]['labels'] = request.json.get('labels', diary[0]['labels'])
    diary[0]['year'] = request.json.get('year', diary[0]['year'])
    return jsonify({'task': diary[0]})                  

"""This allows the deletion of an ID-specified diary.Does not expect any params"""
@app.route('/api/v1/diaries/<int:id>/delete', methods=['DELETE'])
def delete_task(id):
    """Delete details function"""
    diary = [diary for diary in diary_entries if diary['id'] == id]
    if len(diary) == 0:
        raise exceptions.NotFound
    diary_entries.remove(diary[0])
    return jsonify({'result': True})

"""This will create a new diary entry and increment the ID automagically.
Example JSON object is {'name':'New Entry', 'description':'A cool thing', 'labels':['woow', 'wau']}
"""
@app.route('/api/v1/diaries/create', methods=['POST'])
def create_entry():
    """Entery creation handler"""
    if not request.json or not 'name' in request.json:
        raise exceptions.NotAcceptable
    diary = {
        'id': diary_entries[-1]['id'] + 1,
        'name': request.json['name'],
        'description': request.json.get('description', ""),
        'label':request.json.get('labels', ""),
        'year': str(datetime.now().year)
    }
    diary_entries.append(diary)
    return jsonify({'diary': diary}), 201

app.run()
